G = dim(M)[2],
N = N,
D = ifelse(!covariates, 0, dim(X)[1])
)
logfac = vector(length = max(M))
logfac[1] = 0
for (i in 2:length(logfac)) {
logfac[i] = log(i) + logfac[i-1]
}
if (is.null(P)) {
Theta$P <- matrix(nrow = dims$K, ncol = dims$N)
for (k in 1:dims$K) {
for (n in 1:dims$N) {
Theta$P[k,n] <- stats::rgamma(1, Theta$Alpha_p[k,n], Theta$Beta_p[k,n])
}
}
} else {
Theta$P <- P
}
if (is.null(E)) {
Theta$E <- matrix(nrow = dims$N, ncol = dims$G)
for (n in 1:dims$N) {
for (g in 1:dims$G) {
Theta$E[n,g] <- stats::rgamma(1, Theta$Alpha_e[n,g], Theta$Beta_e[n,g])
}
}
} else {
Theta$E <- E
}
Theta$Z <- array(dim = c(dims$K, dims$N, dims$G))
for (k in 1:dims$K) {
for (g in 1:dims$G) {
Theta$Z[k,,g] <- sample_Zkg_poisson_gamma_single(k, g, M, Theta, dims)
}
}
if (covariates) {
Theta$mu0 <- rgamma(1, ae, be)
Theta$gamma <- matrix(0, nrow = dims$N, ncol = dims$D)
Theta$delta <- matrix(0, nrow = dims$N, ncol = dims$D)
}
RMSE <- c()
KL <- c()
loglik <- c()
chains <- list(
P = list(),
E = list(),
Z = list()
)
if (covariates) {
chains$mu0 <- list()
chains$gamma <- list()
chains$delta <- list()
}
}
for (iter in 1:niters) {
temper = ifelse(tempering, gamma_sched[iter], 1)
for (k in 1:dims$K) {
for (n in 1:dims$N) {
Theta$P[k, n] <- sample_Pkn_poisson_gamma_single(
k, n, M, Theta, temper
)
}
}
for (n in 1:N) {
for (g in 1:dims$G) {
Theta$E[n, g] <- sample_Eng_poisson_gamma_single(
n, g, M, X, Theta, covariates, temper
)
}
}
for (k in 1:dims$K) {
for (g in 1:dims$G) {
Theta$Z[k,,g] <- sample_Zkg_poisson_gamma_single(
k, g, M, Theta, dims
)
}
}
if (covariates) {
Theta$mu0 <- sample_mu0_poisson_gamma_single(X, Theta, dims, temper)
for (n in 1:dims$N) {
for(d in 1:dims$D) {
Theta$delta[n,d] <- sample_delta_nd_poisson_gamma_single(
n, d, Theta, dims, temper
)
}
}
Theta$gamma <- sample_gamma_poisson_gamma_single(Theta, dims, temper)
}
RMSE <- c(RMSE, get_RMSE(M, Theta))
KL <- c(KL, get_KLDiv(M, Theta))
loglik <- c(loglik, get_loglik_poisson_gamma_single(M, Theta, dims, logfac))
chains$P[[iter]] <- Theta$P
chains$E[[iter]] <- Theta$E
chains$Z[[iter]] <- Theta$Z
if (covariates) {
chains$mu0[[iter]] <- Theta$mu0
chains$delta[[iter]] <- Theta$delta
chains$gamma[[iter]] <- Theta$gamma
}
if (iter %% logevery == 0 | iter == niters) {
cat(paste(iter, "/", niters, "\n"))
grDevices::pdf(plotfile)
graphics::par(mfrow = c(3,1))
plot(RMSE)
if (sum(!is.na(KL)) > 0) {
if (sum(KL != -Inf, na.rm = TRUE) > 0) {
plot(KL)
}
}
if (sum(!is.na(loglik)) > 0){
if (sum(loglik != -Inf, na.rm = TRUE) > 0) {
plot(loglik)
}
}
grDevices::dev.off()
keep = burn_in:length(chains$P)
res <- list(
M = M, X = X,
chains = chains,
P.mean = Reduce(`+`, chains$P[keep])/length(keep),
E.mean = Reduce(`+`, chains$E[keep])/length(keep),
Z.mean = Reduce(`+`, chains$Z[keep])/length(keep),
burn_in = burn_in,
loglik.chain = loglik,
RMSE.chain = RMSE,
KLDiv.chain = KL,
final_metrics = list(
loglik = loglik[iter],
RMSE = RMSE[iter],
KLDiv = KL[iter]
)
)
save(res, file = savefile)
}
}
iter
Theta$delta
Theta$gamma
Theta$E
Theta$P
source("~/Desktop/github/jennalandy/bayesNMF/R/poisson_gamma_single.R", echo=TRUE)
{
P = NULL
E = NULL
tempering = TRUE
gamma_sched = c(rep(0,10),sapply((-9):(-5),function(x) rep(10^x,100)),rep(10^(-4),500),
sapply(seq(0.1,8.9,by=0.1),function(x) rep((1+x)*10^(-4),100)),
sapply(seq(0,8.9,by=0.1),function(x) rep((1+x)*10^(-3),100)),
sapply(seq(0,8.9,by=0.1),function(x) rep((1+x)*10^(-2),100)),
sapply(seq(0,8.9,by=0.1),function(x) rep((1+x)*10^(-1),100)),rep(1,13090)
)
niters = ifelse(tempering, length(gamma_sched), 10000)
burn_in = round(niters/2)
logevery = 100
file = 'nmf_poisson_gamma'
overwrite = FALSE
Theta = list(
ap = 5,
bp = 0.05,
ae = 5,
be = 0.01,
lambdap = 0.5,
lambdae = 1,
c = 10,
tau = 0.3,
Alpha_p = matrix(
rexp(n = dim(M)[1]*N, lambdap),
nrow = dim(M)[1], ncol = N
),
Beta_p = matrix(
rgamma(n = dim(M)[1]*N, ap, bp),
nrow = dim(M)[1], ncol = N
),
Alpha_e = matrix(
rexp(N*dim(M)[2], lambdae),
nrow = N, ncol = dim(M)[2]
),
Beta_e = matrix(
rgamma(n = N*dim(M)[2], ae, be),
nrow = N, ncol = dim(M)[2]
)
)
}
{
covariates = !is.null(X)
dims = list(
K = dim(M)[1],
G = dim(M)[2],
N = N,
D = ifelse(!covariates, 0, dim(X)[1])
)
logfac = vector(length = max(M))
logfac[1] = 0
for (i in 2:length(logfac)) {
logfac[i] = log(i) + logfac[i-1]
}
if (is.null(P)) {
Theta$P <- matrix(nrow = dims$K, ncol = dims$N)
for (k in 1:dims$K) {
for (n in 1:dims$N) {
Theta$P[k,n] <- stats::rgamma(1, Theta$Alpha_p[k,n], Theta$Beta_p[k,n])
}
}
} else {
Theta$P <- P
}
if (is.null(E)) {
Theta$E <- matrix(nrow = dims$N, ncol = dims$G)
for (n in 1:dims$N) {
for (g in 1:dims$G) {
Theta$E[n,g] <- stats::rgamma(1, Theta$Alpha_e[n,g], Theta$Beta_e[n,g])
}
}
} else {
Theta$E <- E
}
Theta$Z <- array(dim = c(dims$K, dims$N, dims$G))
for (k in 1:dims$K) {
for (g in 1:dims$G) {
Theta$Z[k,,g] <- sample_Zkg_poisson_gamma_single(k, g, M, Theta, dims)
}
}
if (covariates) {
Theta$mu0 <- rgamma(1, ae, be)
Theta$gamma <- matrix(0, nrow = dims$N, ncol = dims$D)
Theta$delta <- matrix(0, nrow = dims$N, ncol = dims$D)
}
RMSE <- c()
KL <- c()
loglik <- c()
chains <- list(
P = list(),
E = list(),
Z = list()
)
if (covariates) {
chains$mu0 <- list()
chains$gamma <- list()
chains$delta <- list()
}
}
for (iter in 1:niters) {
temper = ifelse(tempering, gamma_sched[iter], 1)
for (k in 1:dims$K) {
for (n in 1:dims$N) {
Theta$P[k, n] <- sample_Pkn_poisson_gamma_single(
k, n, M, Theta, temper
)
}
}
for (n in 1:N) {
for (g in 1:dims$G) {
Theta$E[n, g] <- sample_Eng_poisson_gamma_single(
n, g, M, X, Theta, covariates, temper
)
}
}
for (k in 1:dims$K) {
for (g in 1:dims$G) {
Theta$Z[k,,g] <- sample_Zkg_poisson_gamma_single(
k, g, M, Theta, dims
)
}
}
if (covariates) {
Theta$mu0 <- sample_mu0_poisson_gamma_single(X, Theta, dims, temper)
for (n in 1:dims$N) {
for(d in 1:dims$D) {
Theta$delta[n,d] <- sample_delta_nd_poisson_gamma_single(
n, d, Theta, dims, temper
)
}
}
Theta$gamma <- sample_gamma_poisson_gamma_single(Theta, dims, temper)
}
RMSE <- c(RMSE, get_RMSE(M, Theta))
KL <- c(KL, get_KLDiv(M, Theta))
loglik <- c(loglik, get_loglik_poisson_gamma_single(M, Theta, dims, logfac))
chains$P[[iter]] <- Theta$P
chains$E[[iter]] <- Theta$E
chains$Z[[iter]] <- Theta$Z
if (covariates) {
chains$mu0[[iter]] <- Theta$mu0
chains$delta[[iter]] <- Theta$delta
chains$gamma[[iter]] <- Theta$gamma
}
if (iter %% logevery == 0 | iter == niters) {
cat(paste(iter, "/", niters, "\n"))
grDevices::pdf(plotfile)
graphics::par(mfrow = c(3,1))
plot(RMSE)
if (sum(!is.na(KL)) > 0) {
if (sum(KL != -Inf, na.rm = TRUE) > 0) {
plot(KL)
}
}
if (sum(!is.na(loglik)) > 0){
if (sum(loglik != -Inf, na.rm = TRUE) > 0) {
plot(loglik)
}
}
grDevices::dev.off()
keep = burn_in:length(chains$P)
res <- list(
M = M, X = X,
chains = chains,
P.mean = Reduce(`+`, chains$P[keep])/length(keep),
E.mean = Reduce(`+`, chains$E[keep])/length(keep),
Z.mean = Reduce(`+`, chains$Z[keep])/length(keep),
burn_in = burn_in,
loglik.chain = loglik,
RMSE.chain = RMSE,
KLDiv.chain = KL,
final_metrics = list(
loglik = loglik[iter],
RMSE = RMSE[iter],
KLDiv = KL[iter]
)
)
save(res, file = savefile)
}
}
iter
n
d
Theta$gamma
?arms
source("~/Desktop/github/jennalandy/bayesNMF/R/poisson_gamma_single.R", echo=TRUE)
{
P = NULL
E = NULL
tempering = TRUE
gamma_sched = c(rep(0,10),sapply((-9):(-5),function(x) rep(10^x,100)),rep(10^(-4),500),
sapply(seq(0.1,8.9,by=0.1),function(x) rep((1+x)*10^(-4),100)),
sapply(seq(0,8.9,by=0.1),function(x) rep((1+x)*10^(-3),100)),
sapply(seq(0,8.9,by=0.1),function(x) rep((1+x)*10^(-2),100)),
sapply(seq(0,8.9,by=0.1),function(x) rep((1+x)*10^(-1),100)),rep(1,13090)
)
niters = ifelse(tempering, length(gamma_sched), 10000)
burn_in = round(niters/2)
logevery = 100
file = 'nmf_poisson_gamma'
overwrite = FALSE
Theta = list(
ap = 5,
bp = 0.05,
ae = 5,
be = 0.01,
lambdap = 0.5,
lambdae = 1,
c = 10,
tau = 0.3,
Alpha_p = matrix(
rexp(n = dim(M)[1]*N, lambdap),
nrow = dim(M)[1], ncol = N
),
Beta_p = matrix(
rgamma(n = dim(M)[1]*N, ap, bp),
nrow = dim(M)[1], ncol = N
),
Alpha_e = matrix(
rexp(N*dim(M)[2], lambdae),
nrow = N, ncol = dim(M)[2]
),
Beta_e = matrix(
rgamma(n = N*dim(M)[2], ae, be),
nrow = N, ncol = dim(M)[2]
)
)
}
{
covariates = !is.null(X)
dims = list(
K = dim(M)[1],
G = dim(M)[2],
N = N,
D = ifelse(!covariates, 0, dim(X)[1])
)
logfac = vector(length = max(M))
logfac[1] = 0
for (i in 2:length(logfac)) {
logfac[i] = log(i) + logfac[i-1]
}
if (is.null(P)) {
Theta$P <- matrix(nrow = dims$K, ncol = dims$N)
for (k in 1:dims$K) {
for (n in 1:dims$N) {
Theta$P[k,n] <- stats::rgamma(1, Theta$Alpha_p[k,n], Theta$Beta_p[k,n])
}
}
} else {
Theta$P <- P
}
if (is.null(E)) {
Theta$E <- matrix(nrow = dims$N, ncol = dims$G)
for (n in 1:dims$N) {
for (g in 1:dims$G) {
Theta$E[n,g] <- stats::rgamma(1, Theta$Alpha_e[n,g], Theta$Beta_e[n,g])
}
}
} else {
Theta$E <- E
}
Theta$Z <- array(dim = c(dims$K, dims$N, dims$G))
for (k in 1:dims$K) {
for (g in 1:dims$G) {
Theta$Z[k,,g] <- sample_Zkg_poisson_gamma_single(k, g, M, Theta, dims)
}
}
if (covariates) {
Theta$mu0 <- rgamma(1, ae, be)
Theta$gamma <- matrix(0, nrow = dims$N, ncol = dims$D)
Theta$delta <- matrix(0, nrow = dims$N, ncol = dims$D)
}
RMSE <- c()
KL <- c()
loglik <- c()
chains <- list(
P = list(),
E = list(),
Z = list()
)
if (covariates) {
chains$mu0 <- list()
chains$gamma <- list()
chains$delta <- list()
}
}
for (iter in 1:niters) {
temper = ifelse(tempering, gamma_sched[iter], 1)
for (k in 1:dims$K) {
for (n in 1:dims$N) {
Theta$P[k, n] <- sample_Pkn_poisson_gamma_single(
k, n, M, Theta, temper
)
}
}
for (n in 1:N) {
for (g in 1:dims$G) {
Theta$E[n, g] <- sample_Eng_poisson_gamma_single(
n, g, M, X, Theta, covariates, temper
)
}
}
for (k in 1:dims$K) {
for (g in 1:dims$G) {
Theta$Z[k,,g] <- sample_Zkg_poisson_gamma_single(
k, g, M, Theta, dims
)
}
}
if (covariates) {
Theta$mu0 <- sample_mu0_poisson_gamma_single(X, Theta, dims, temper)
for (n in 1:dims$N) {
for(d in 1:dims$D) {
Theta$delta[n,d] <- sample_delta_nd_poisson_gamma_single(
n, d, Theta, dims, temper
)
}
}
Theta$gamma <- sample_gamma_poisson_gamma_single(Theta, dims, temper)
}
RMSE <- c(RMSE, get_RMSE(M, Theta))
KL <- c(KL, get_KLDiv(M, Theta))
loglik <- c(loglik, get_loglik_poisson_gamma_single(M, Theta, dims, logfac))
chains$P[[iter]] <- Theta$P
chains$E[[iter]] <- Theta$E
chains$Z[[iter]] <- Theta$Z
if (covariates) {
chains$mu0[[iter]] <- Theta$mu0
chains$delta[[iter]] <- Theta$delta
chains$gamma[[iter]] <- Theta$gamma
}
if (iter %% logevery == 0 | iter == niters) {
cat(paste(iter, "/", niters, "\n"))
grDevices::pdf(plotfile)
graphics::par(mfrow = c(3,1))
plot(RMSE)
if (sum(!is.na(KL)) > 0) {
if (sum(KL != -Inf, na.rm = TRUE) > 0) {
plot(KL)
}
}
if (sum(!is.na(loglik)) > 0){
if (sum(loglik != -Inf, na.rm = TRUE) > 0) {
plot(loglik)
}
}
grDevices::dev.off()
keep = burn_in:length(chains$P)
res <- list(
M = M, X = X,
chains = chains,
P.mean = Reduce(`+`, chains$P[keep])/length(keep),
E.mean = Reduce(`+`, chains$E[keep])/length(keep),
Z.mean = Reduce(`+`, chains$Z[keep])/length(keep),
burn_in = burn_in,
loglik.chain = loglik,
RMSE.chain = RMSE,
KLDiv.chain = KL,
final_metrics = list(
loglik = loglik[iter],
RMSE = RMSE[iter],
KLDiv = KL[iter]
)
)
save(res, file = savefile)
}
}
iter
Theta$gamma
Theta$delta
